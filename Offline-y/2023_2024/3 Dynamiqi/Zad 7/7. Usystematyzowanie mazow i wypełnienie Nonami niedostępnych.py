def print_straight(T):
    # Zamień None na '#'
    formatted_T = [[('#' if item is None else item) for item in row] for row in T]

    # Oblicz maksymalną szerokość każdej kolumny
    column_widths = [max(len(str(formatted_T[i][j])) for i in range(len(formatted_T))) for j in range(len(formatted_T[0]))]

    # Wypośrodkuj kolumny
    for row in formatted_T:
        row_str = " ".join(f"{str(row[col]).rjust(column_widths[col])}" for col in range(len(row)))
        print(row_str)

def MazeFucking_Runner(L):
    def z_kropek_na_zera(Hash_map):
        n = len(Hash_map)
        Labi = [[0 for _ in range(n)] for _ in range(n)]
        for i in range(n):
            for j in range(n):
                if Hash_map[i][j] == '#':
                    Labi[i][j] = None

        return Labi

    def wypełnienie_Nonami_i_zamiana_z_Hash_na_0_None(Labi):  # Przyjmuje Hash_mape i daje 0/None mape
        def z_kropek_na_zera(Hash_map):
            n = len(Hash_map)
            Labi = [[0 for _ in range(n)] for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    if Hash_map[i][j] == '#':
                        Labi[i][j] = None

            return Labi

        Labi = z_kropek_na_zera(Labi)
        from collections import deque

        def Wypelnij_niedostepne_Nonami_lewy_gorny(Labirynt):
            n = len(Labirynt)
            m = len(Labirynt[0]) if n > 0 else 0

            # BFS
            queue = deque([(0, 0)])
            while queue:
                x, y = queue.popleft()
                if Labirynt[x][y] == 0:
                    Labirynt[x][y] = 'V'  # 'V' oznacza, że komórka była odwiedzona

                    # Sprawdzanie sąsiadów
                    for dx, dy in [(0, 1), (1, 0), (-1, 0)]:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < n and 0 <= ny < m and Labirynt[nx][ny] == 0:
                            queue.append((nx, ny))

            # Oznaczanie niedostępnych komórek jako None
            for i in range(n):
                for j in range(m):
                    if Labirynt[i][j] == 0:
                        Labirynt[i][j] = None
                    elif Labirynt[i][j] == 'V':
                        Labirynt[i][j] = 0

            return Labirynt

        def Wypelnij_niedostepne_Nonami_prawny_dolny(Labirynt):
            n = len(Labirynt)
            m = len(Labirynt[0]) if n > 0 else 0

            # BFS starting from T[n-1][n-1]
            queue = deque([(n - 1, n - 1)])
            while queue:
                x, y = queue.popleft()
                if Labirynt[x][y] == 0:
                    Labirynt[x][y] = 'V'  # 'V' oznacza, że komórka była odwiedzona

                    # Sprawdzanie sąsiadów
                    for dx, dy in [(0, -1), (-1, 0), (1, 0)]:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < n and 0 <= ny < m and Labirynt[nx][ny] == 0:
                            queue.append((nx, ny))

            # Oznaczanie niedostępnych komórek jako None
            for i in range(n):
                for j in range(m):
                    if Labirynt[i][j] == 0:
                        Labirynt[i][j] = None
                    elif Labirynt[i][j] == 'V':
                        Labirynt[i][j] = 0

            return Labirynt

        Labi = Wypelnij_niedostepne_Nonami_lewy_gorny(Labi)
        Labi = Wypelnij_niedostepne_Nonami_prawny_dolny(Labi)

        return Labi

    # Stworzę tablice dynamiczną z 0 - komnatami i None - niedostępnymi ლ(╹◡╹ლ)
    DQ = z_kropek_na_zera(L) # Wypełniam Nonami miejsca do których na pewno nie dotrze
    n = len(L)
    quo_vadis = [[[0, 0, 0] for _ in range(n)] for _ in range(n)]
    quo_vadis[0][0] = [1, 1, 0]  # Ustawiam że może wejść w prawo albo w dół

    i = 1
    while i < n and DQ[i][0] != None:
        DQ[i][0] = DQ[i - 1][0] + 1
        quo_vadis[i][0][0] = 1
        i += 1

    for col in range(1, n):
        seed = 0
        if DQ[0][col] != None:
            if DQ[0][col - 1] != None:
                DQ[0][col] = DQ[0][col - 1] + 1
                quo_vadis[0][col][1] = 1

        for row_down in range(1, n):
            if DQ[row_down][col] != None and (
                    quo_vadis[row_down][col - 1] != [0, 0, 0] or quo_vadis[row_down - 1][col] != [0, 0, 0]):
                if DQ[row_down - 1][col] != None and DQ[row_down][col - 1] != None:  # Istnieje góra i lewo
                    if DQ[row_down - 1][col] == DQ[row_down][col - 1]:  # Są takie same
                        DQ[row_down][col] = DQ[row_down][col - 1] + 1
                        quo_vadis[row_down][col] = [1, 1, 0]  # Mógł przyjść z obydwóch kierunków
                    else:  # Są różne
                        DQ[row_down][col] = max(
                            DQ[row_down - 1][col] + 1,  # Góra
                            DQ[row_down][col - 1] + 1  # Lewo
                        )
                        # WYbieram kierunek skąd przyszedł
                        chosen = 0 if DQ[row_down][col] == DQ[row_down - 1][col] + 1 else 1
                        quo_vadis[row_down][col][chosen] = 1
                elif DQ[row_down - 1][col] == None and DQ[row_down][col - 1] == None:  # Obydwa są Nonami
                    DQ[row_down][col] = 0
                elif DQ[row_down - 1][col] == None and DQ[row_down][col - 1] != None:  # Góra to None
                    DQ[row_down][col] = DQ[row_down][col - 1] + 1
                    quo_vadis[row_down][col][1] = 1
                else:  # Lewo to None
                    DQ[row_down][col] = DQ[row_down - 1][col] + 1
                    quo_vadis[row_down][col][0] = 1

        for row_up in range(n - 2, -1, -1):
            if DQ[row_up][col] != None:
                if DQ[row_up + 1][col] != None and (
                        quo_vadis[row_up + 1][col][1] == 1 or quo_vadis[row_up + 1][col][2] == 1):
                    DQ[row_up][col] = max(
                        DQ[row_up][col],
                        DQ[row_up + 1][col] + 1
                    )
                    quo_vadis[row_up][col][2] = 1
                elif DQ[row_up][col - 1] != None and DQ[row_up + 1][col] == None:
                    seed = max(seed,DQ[row_up][col - 1] + 1)

                    # if col == 1:
                    #     print(f'ustawiam seeda {seed}, jestem na row:{row_up}, col {col}')
                # if col == 1:
                #     print(f'sprawdzam war na zamiane seeda:{seed} DQ: {DQ[row_up][col]} row: {row_up}')
                if seed > DQ[row_up][col]:
                    DQ[row_up][col] = seed
                    # if col == 1:
                    #     print(f'nadpisuje seedem row: {row_up}')
            else:
                seed = 0

            if seed != 0:
                seed += 1

    return DQ

Maze_my_1 = [ "....",
    "..#.",
    "..#.",
    "...." ]

Maze_my_2 = ["...#.",
          ".#...",
          "..##.",
          ".....",
          ".#..."]

Maze_test_0 = ['....', '..#.', '..#.', '....']
Maze_test_1 = ['......', '#..#..', '.#..#.', '##..#.', '......', '......']
Maze_test_2 = ['....#...##', '...#....##', '#.........', '.......#..', '.......##.', '...#....#.', '#....#....', '##.....#.#', '..........', '......#...']
Maze_test_3 = ['........#.#....##...', '..................#.', '....#.........##..##', '..#...#..#...#....#.', '........###..#..###.', '..#.#..##....#..#.#.', '#.....#...#.#.#.....', '..#..##......#...###', '.......###.........#', '#.......#..........#', '.#.#..##.#.#.#..#...', '.##..#........#.##.#', '....###...........#.', '........#......#....', '#..............#....', '.#..#......#......#.', '..#................#', '.......#..#.#......#', '.#...............#.#', '#......#....#...#...']
Maze_test
Maze_test_5 = ['.#...#.#.........##.#..#.....#.#.#...#....#...#.....#...............##...#....###.##......#.#.#.....', '.......#..##.............#....#...##..#....#........#.....##......#..............#........#.#..#..##', '##........#............#............##..##......#.#...###.#......##......#..##.#..#....#..#.........', '#...........##.#............#...#.#.##......#......#................##...#......##.........#......#.', '............#...##.....#....#....#............#.......#.....#.......##....#.#.......##.#.###......#.', '...........#..........#.#.#...#...#..........#..#........#..#......##...........####..........##....', '......#..#............#..#...##...##...##......#.#......#..#..###........###..###..........#..#.....', '#.......#.................#.........#.#.........###......#...#.....##.#.........#.........#...#..#..', '.........#...#..#.#.#..#.#..........#....#........#....#......#.......#..##.....#.#..........#......', '....##..#...............##...............#.......#..#..#..............##...#...##........#.#....#...', '..........#...#...........#.#....#....#.............##.###.......##.....#.#.....#.........#..##....#', '............#........#.#......#.#..#..#...............#....##.....#....#.......###....#..#....###.#.', '...#...#..#.##..#.........#.#.#...........#......#......#.#...........................#.##..........', '....#..#...#....#.#.......##..#.##.#.......#.#.......#.........#.#.#..##.....#.#....#....#........#.', '...#..........#.....#..#.............#.......#........#.......#.............#.......#.#........#..#.', '.....#..#.#..#.....####...#.............#..#...#........#......#....#.#..#...#...#......##......#..#', '......##.......##......#....#...#.......................#...#.....................#...#.#...........', '.#.......##.#..#........#.#............#.........#......#................#..#....#.#....#.....#.....', '.......#..#.##.#.....#..#......#....#...#.....##.......#...#.#....#......#..##.#.....##.##..........', '..#.......#............#.........#..##.....#.......#...#...##..............#.#....#...............#.', '............#..........#....#.....#.....##...........................#...#.#..#....##....#..........', '.#.#........#...........#...#.....#......#.#..##.....#.#.......#.#.......##.#....##...#.#..#.....#..', '.....##......#....#...............................#..........##.#..#.....####....#...#.#.......#.#..', '.#.......................#.............#...#.......#..#........#..............##...............#....', '........#.....##..#..#....#...#.#...#...#.....#.#.##..#.........#......##.......#.....#...#.#...#...', '.........#..#.....#..##..#..........#.#............#...#........#.................#......###...##...', '.....##....##...................#.#...#.#.##.......#...#.........#.........#..#.......#......#......', '..................#...##...#...#.#......#..#.......###............#.....#....#.#....................', '..#.#.......#.....##....##......#..#..#.........#.....#...............#..#.#...............##..#.###', '.#...........##...............#...##......................#.#....#.#....#.#........##.#.#........#..', '.##......#.#.......#..#..#......#.........#....#.#......#.###....#......#.................#.##......', '#..#......#.........##..........#.....#..#.#.#........#.#.....#.##...##..#....#.....#.....#.#.##....', '...#........##.....#..#............##.#.##.......#....##.###..#.....#.......#......##....#.#.##..#..', '.......#.##....#......#..#....#................#....#....#.....#.....##...............###.......#...', '..#...#.....##...#.......#.......#.##.#...#.#.#........#..#......#..###.........#......#.##........#', '........#........##......#.......#....#.###.###.....#..................#...#...##...........##...#..', '........#.#.........###....#......##...#..#......##..#.......#...#....##.##..#...........#...##.#...', '........##....##...##.....#....#...#.......#..............#...............#.........#.....#..##.....', '.#.#......#...##....#...##.##.#....#.....#........#.#..#...#.......#......#.##.....#.......#....#..#', '#..........#..#...............#.#..##..#...#.###..#..........#...............#......#.#.............', '......#...#..........#..#.....##...#.#.##......##.#.#...#..##....#.....#.#.....#.....#....#.........', '##.##...#..................##.#.#.#..#.#........#.#.....#..#...###.........##.#.........#...#....#..', '#..........#...#....#...........#.....#.......#..........#...#.##..###.......................#......', '.....#.......####..#...#..#........###...............#.....#..##...........#.#...#.#...#.#...#......', '.........#.#........#...##......#...#.#....#..#.......#.#.#.....#..........#.................#.....#', '...................#.......#.#......#..#..#.........#..#.#.#......#.#.................#.#....#......', '........#....###...#...##.#.........##.#...#.......#......#..#.......#...#.#..............##......##', '..........#....#.......#..#.####............#..#......##..#......#....#.....#.......#.#.............', '##....##.........#.#......#..#.#.#....#............#.....#.......#.....................#.....#......', '........#.......#.....#.......##..##.#...#................#....##...##...........##..###.#...#......', '.......#.#.........#.#..#.#.#...#.#...#..#....#.#......#..........#........................#........', '#.##........#...................#...#....#.....#....#....#.#.#..##.........#...##.#........##......#', '...##.#.....#..................#.....#.......#.#.......#..............#....##..#..........#.........', '...........#............#.#............#........#....#....#....#.#...#.#.........#..#.#.......#.....', '......#.....#.#.......#.#..#......#......#..#..#.......#......#..........##.....#...#........#......', '..#...#....#...###...#............##...#..#...#......##....#..#.#...#............##..#....#....###..', '..#..#.......................#............##......#........#...................#.#.##...#..#......#.', '...#.#............###......##....##..#.#..#.............#..#..#...#.........##........#.............', '#.....#...#.#....#....#...#.......#.....#..#............#.....##...#.....#................#...#..#..', '...#........#......#...........#.......#.##.......#...#.....#..#.....................#..#.#......#..', '.................#..#......#....#.........#....##..#........#...........................##.#.....#..', '.#...#...#..............#....##..#..#......##.#............#..............#.#.......#.##....#...#...', '...##.#...#...#...........##.....#..#..#.....##.....#....#...#...##.#...#..#.......#......####....#.', '......##.........#...#.....#...##............##.............#...#........##.....#..#.##.#.##......#.', '.#.....#.##....................#..#.........#..#...#........#..#............#.......#..........#..##', '...............#.....#..#..........#...........#...#..#..#......##..#.#...............#..#..#...#...', '#.........#.#..........##.##..#.#...#....#............##...#..................#.#...#...#...........', '...#.......###......#............#.....#.#....#..........#...#..#........#####....#...#....#.#..#...', '....##....#......###.#.........#.....#.#........#.#....#...#.....................#...#..#....#.##..#', '.........###...#.##...#......#.....#..#.......#.##........#.....#.....##.#.#...##.#.#....#####..#...', '..#......#......#....##.....#.#.....#.#..#.....#.#.#.......#...#..#....#......#...#.#...###.#....#..', '.......#......#....#.##..........#.........##............###...#......#....###.......##....##.......', '.####....#..#..#.#..........#..#...#..#..##..#.#........#....#........#......#..#.......#...........', '.#.......#.........#...#.....#..............#..#......##........#..........#.........##........#....', '.#....#...........###.#.....#..#...##........#.....#.#..#...#.#...........................#.#.......', '##.....##...#.#...................#...#.#..##.#..#.........##..##.#....#....#.......#..#......#.....', '#...#.#.....#.##........#........#.......#..#...##..#......#.......#......#...##.#...##......##....#', '##.#...#.#.#....##....#.#........#....#....##..#.....#..##..#.#.................#.......#.........#.', '.....#..##..#..#....#.......#...#....#...........#.....#........#................#...#..###..#.#.#..', '.#...........#....#....#...#.....#..#....#.......#..#.#...#.#...............##................#...#.', '#.#..#...#.....##....#.#..........#..#...#........##....#..#..#..#.#..#.....#..##.....###...#...#..#', '...#....#.......#............#...#.....#..........#.....#.....##...##.##..........#...##...#......#.', '..#..#..........##...#.#.....##.#..#.#.##......#..........#.....#......#..#..#...#.#.......#.......#', '.....#..#..#..#.#.#..#.....#.........#.##.##......#....#....#.##.........#..........#..##...#...#.#.', '.....##....#.........#.....#..#......#..#...............#..........#..........#..###...#....#.......', '.......##...#.......##.................#..........#..#....##..#............#....#.#.###....#..#....#', '......#..#.......#.........#.....#..#...........#..#.####........#..#..#.....##......#..........#...', '.....#.......#..###.......#..#..........####..........#.......#.....#....#.#......#...##....#..#....', '.......#.......#....#....#..#............#........#......##...#...........#.#.##....#...#...........', '#.#..#..#.......#..####.#..#.....#.#.......#.....##...#.#..........#..##....##..#........#..#...#...', '....................#...#.##.......##.#.......#.#.##.........#.#...##.##..........#....#.........#.#', '#.................####.......#.##..##.....#.#...##....##...#..........##.....##...#..#....#.#.......', '.....##.......#................#.#..................#..#..#......#.......#...#.....#...#.....#......', '.........###...#.....#........#....#.#....#.................#.........#..#..........#...#.........#.', '........#.....#....#.......#.#...#............##..#.#..#.#.......#.#....#...##.........#..........#.', '......#.........#.#.#.....#..##..#......#......#...#...........#..........#...............#..#.#.#..', '....###..#.....................##....#.####............##................#.............#...#........', '........#...#..##...###..#.#..............#...###..##...#........#...#..###..........#....#.##.#.#..', '.#......#.....................#..#..........#.#..#......#...#......#.......#.....###..##..###.#.....', '..#.#.#.....#...#...#.#......#....#....#...........#.........#.......#...#...##.#..#........#....#..']
# Maze_test_6 =
# Maze_test_7 =

print_straight(MazeFucking_Runner(Maze_test_2))

def Wypełnij_niedostepne_Nonami(Labirnt):
    n = len(Labirnt)

    # ___________________________________________________________________________________________
    # Teraz wypełniam w dół poczatek -------------->
    # Robie pierwszą kolumne osobno
    top_of_the_hill = 0 # Góra do zmieniania
    for row in range(1,n):
        if Labirnt[row-1][0] == None:
            Labirnt[row][0] = None
            if top_of_the_hill == 0:
                top_of_the_hill = row

    # Robie wszystkie kolejne
    col = 0
    any_left = True
    prev_row = 0

    while any_left == True:
        any_left = False
        for row in range(top_of_the_hill,n):
            if Labirnt[row-1][col] == None and Labirnt[row][col-1] == None and row>=prev_row-2:
                Labirnt[row][col] = None
                any_left = True
                prev_row = row

        # Teraz przeba jeszcze znalezc top
        while Labirnt[top_of_the_hill][col] == None:
            top_of_the_hill -= 1

        col += 1

    # Teraz szukam możliwych górek dalej -------------->

    # Znajduje początek
    while Labirnt[n-1][col] != None:
        col += 1

    any_left = True
    while any_left == True:
        any_left = False
        row = n-2

    # ___________________________________________________________________________________________

    return Labirnt

def z_kropek_na_zera(Hash_map):
    n = len(Hash_map)
    Labi = [[0 for _ in range(n)] for _ in range(n)]
    for i in range(n):
        for j in range(n):
            if Hash_map[i][j] == '#':
                Labi[i][j] = None

    return Labi

def test_wypelniena(Hash_map):
    print_straight(z_kropek_na_zera(Hash_map))
    def wypełnienie_Nonami(Labi):  # Przyjmuje Hash_mape i daje 0/None mape
        def z_kropek_na_zera(Hash_map):
            n = len(Hash_map)
            Labi = [[0 for _ in range(n)] for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    if Hash_map[i][j] == '#':
                        Labi[i][j] = None

            return Labi

        Labi = z_kropek_na_zera(Labi)
        from collections import deque

        def Wypelnij_niedostepne_Nonami_lewy_gorny(Labirynt):
            n = len(Labirynt)
            m = len(Labirynt[0]) if n > 0 else 0

            # BFS
            queue = deque([(0, 0)])
            while queue:
                x, y = queue.popleft()
                if Labirynt[x][y] == 0:
                    Labirynt[x][y] = 'V'  # 'V' oznacza, że komórka była odwiedzona

                    # Sprawdzanie sąsiadów
                    for dx, dy in [(0, 1), (1, 0), (-1, 0)]:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < n and 0 <= ny < m and Labirynt[nx][ny] == 0:
                            queue.append((nx, ny))

            # Oznaczanie niedostępnych komórek jako None
            for i in range(n):
                for j in range(m):
                    if Labirynt[i][j] == 0:
                        Labirynt[i][j] = None
                    elif Labirynt[i][j] == 'V':
                        Labirynt[i][j] = 0

            return Labirynt

        def Wypelnij_niedostepne_Nonami_prawny_dolny(Labirynt):
            n = len(Labirynt)
            m = len(Labirynt[0]) if n > 0 else 0

            # BFS starting from T[n-1][n-1]
            queue = deque([(n - 1, n - 1)])
            while queue:
                x, y = queue.popleft()
                if Labirynt[x][y] == 0:
                    Labirynt[x][y] = 'V'  # 'V' oznacza, że komórka była odwiedzona

                    # Sprawdzanie sąsiadów
                    for dx, dy in [(0, -1), (-1, 0), (1, 0)]:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < n and 0 <= ny < m and Labirynt[nx][ny] == 0:
                            queue.append((nx, ny))

            # Oznaczanie niedostępnych komórek jako None
            for i in range(n):
                for j in range(m):
                    if Labirynt[i][j] == 0:
                        Labirynt[i][j] = None
                    elif Labirynt[i][j] == 'V':
                        Labirynt[i][j] = 0

            return Labirynt

        Labi = Wypelnij_niedostepne_Nonami_lewy_gorny(Labi)
        Labi = Wypelnij_niedostepne_Nonami_prawny_dolny(Labi)

        return Labi
    T = wypełnienie_Nonami(Hash_map)
    print('')
    print_straight(T)

# test_wypelniena(Maze_test_4)







